"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[619],{93090:e=>{e.exports=JSON.parse('{"functions":[{"name":"get","desc":"Returns the current value of the property.","params":[{"name":"...","desc":"","lua_type":"any"}],"returns":[{"desc":"","lua_type":"T"}],"function_type":"method","source":{"line":20,"path":"src/docs/prop.luau"}},{"name":"set","desc":"Sets the value of the property to the new value.","params":[{"name":"new_value","desc":"","lua_type":"T"},{"name":"...","desc":"","lua_type":"any"}],"returns":[],"function_type":"method","source":{"line":30,"path":"src/docs/prop.luau"}}],"properties":[{"name":"middleware","desc":"An interface for managing middleware for the `get` and `set` accessors. Refer to the `middleware` class for more information.","lua_type":"prop_middleware<T>","source":{"line":39,"path":"src/docs/prop.luau"}},{"name":"changed","desc":"A signal that fires when the property value changes.","lua_type":"var_signal","source":{"line":46,"path":"src/docs/prop.luau"}},{"name":"signal_security","desc":"The security level of the signal. Can be `\\"base\\"`, `\\"immutable\\"`, or `\\"restricted\\"`.\\n\\nWhen this property is set to `\\"base\\"`, the `\\"changed\\"` signal property will be set to a default signal returned from the `signal.new` function.\\nWhen this property is set to `\\"immutable\\"`, the `\\"changed\\"` signal property will be set to the `\\"Immutable\\"` interface of the signal.\\nWhen this property is set to `\\"restricted\\"`, the `\\"changed\\"` signal property will be set to the `\\"Restricted\\"` interface of the signal.","lua_type":"basic_prop<signal_security>","source":{"line":59,"path":"src/docs/prop.luau"}},{"name":"type_validator","desc":"A function that can be used to validate the type of any new value passed to the property. Returns a boolean and an optional error message.\\nThe type_validator only runs if the `strict` property is set to `true`. \\n\\nThe validator is used after the middleware for both the `get` and `set` accessor transforms the value.\\nIt also prevents any malformed values from being set to the property.\\n\\nIf no validator is provided and the `strict` property is set to `true`, the property will use the `typeof` function, comparing the type of the new value to the type of the initial value.","lua_type":"basic_prop<typecheck<T>>","source":{"line":72,"path":"src/docs/prop.luau"}},{"name":"strict","desc":"A boolean value that determines whether the property should be type-checked before setting a new value.","lua_type":"basic_prop<boolean>","source":{"line":79,"path":"src/docs/prop.luau"}},{"name":"type_name","desc":"The name of the type of the property. Defaults to the type of the initial value.","lua_type":"basic_prop<string>","source":{"line":86,"path":"src/docs/prop.luau"}},{"name":"immutable","desc":"An interface for managing an immutable property. \\nRefer to the `immutable_prop` class for more information.","lua_type":"immutable_prop<T>","source":{"line":97,"path":"src/docs/prop.luau"}},{"name":"public","desc":"An interface for managing a public property. \\nRefer to the `public_prop` class for more information.","lua_type":"public_prop<T>","source":{"line":105,"path":"src/docs/prop.luau"}}],"types":[{"name":"var_signal","desc":"Union type for signals with different security levels. \\nRefer to [`signal` documentation](https://khoshal-studio.github.io/luau-signal/api) for more information.","lua_type":"signal | restricted_signal | immutable_signal","source":{"line":115,"path":"src/docs/prop.luau"}},{"name":"signal_security","desc":"A string that represents the security level of a signal. Can be `\\"base\\"`, `\\"immutable\\"`, or `\\"restricted\\"`.","lua_type":"\\"base\\" | \\"immutable\\" | \\"restricted\\"","source":{"line":122,"path":"src/docs/prop.luau"}},{"name":"typecheck<T>","desc":"A function that can be used to validate the type of a value. Returns a boolean and an optional error message.","lua_type":"(value: T) -> (boolean, string?)","source":{"line":129,"path":"src/docs/prop.luau"}},{"name":"get<T>","desc":"A function that returns the current value of a property.","lua_type":"(...any) -> T","source":{"line":136,"path":"src/docs/prop.luau"}},{"name":"set<T>","desc":"A function that sets the value of a property to a new value.","lua_type":"(new_value: T, ...any) -> ()","source":{"line":143,"path":"src/docs/prop.luau"}},{"name":"prop_setup<T>","desc":"An object that contains the initial value, type validator, type name, middleware, signal security, and typestrict settings for a property.\\nThe `init` field is required, while the rest are optional.\\n\\n## Fields\\ninit - The initial value of the property.\\ntype_validator - A function that validates the type of the property value. Only runs if `typestrict` is set to `true`. Optional.\\ntype_name - The name of the type of the property. Do NOT provide this field with a custom type name unless you have a custom type validator, as the validator will always return false. Optional.\\nmiddleware - A table that contains initial middleware for the `get` and `set` accessors of a property. Optional.\\nsignal_security - The security level of the signal. Refer to the `signal_security` property of the `prop` class for more information. Optional.","fields":[{"name":"init","lua_type":"T","desc":""},{"name":"type_validator","lua_type":"typecheck<T>","desc":""},{"name":"type_name","lua_type":"string?","desc":""},{"name":"middleware","lua_type":"prop_middleware_info<T>?","desc":""},{"name":"signal_security","lua_type":"signal_security?","desc":""},{"name":"typestrict","lua_type":"boolean?","desc":""}],"source":{"line":167,"path":"src/docs/prop.luau"}},{"name":"prop_middleware<T>","desc":"An object that contains middleware for the `get` and `set` accessors of a property.","fields":[{"name":"get","lua_type":"middleware<T>","desc":""},{"name":"set","lua_type":"middleware<T>","desc":""}],"source":{"line":177,"path":"src/docs/prop.luau"}},{"name":"prop_middleware_info<T>","desc":"An optional parameter used to initialize middleware for the `get` and `set` accessors of a property.","fields":[{"name":"get","lua_type":"transformer_list<T>?","desc":""},{"name":"set","lua_type":"transformer_list<T>?","desc":""}],"source":{"line":187,"path":"src/docs/prop.luau"}}],"name":"prop","desc":"A property object that can be used to store a value, manage its state and listen to changes. Features optional middleware for the two `get` and `set` accessors.\\nProvides additional functionality for signal security, type validation, and public and immutable interfaces.","source":{"line":8,"path":"src/docs/prop.luau"}}')}}]);